name: Publish QUICK Docker Images

on:
  push:
    paths:
      - "QUICK/**"  # Trigger only if there are changes in the QUICK folder
    tags:
      - "docker-v*-v*"   # Trigger only if a tag with the format "docker-vX.X.X-vY.Y.Y" is pushed
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME1: crtag/quick-app 
      DOCKER_IMAGE_NAME2: crtag/quick-app-managed 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
        # Step to verify changes in the QUICK folder
      - name: Check for changes in QUICK folder
        id: check_folder_changes
        run: |
          if [[ -z "$(git diff --name-only HEAD^ HEAD | grep QUICK/)" ]]; then
            echo "No relevant changes in QUICK folder; stopping workflow."
            exit 1
          fi

      # Step to extract versions from the tag
      - name: Extract versions from tag
        if: steps.check_folder_changes.outcome == 'success'
        id: extract_versions
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          VERSION1=$(echo "$TAG_NAME" | sed -n 's/docker-v\([0-9.]*\)-v[0-9.]*$/\1/p')
          VERSION2=$(echo "$TAG_NAME" | sed -n 's/docker-v[0-9.]*-v\([0-9.]*\)$/\1/p')

          if [[ -z "$VERSION1" || -z "$VERSION2" ]]; then
            echo "Error: Could not extract versions from tag. Ensure the tag format is docker-vX.X.X-vY.Y.Y."
            exit 1
          fi

          echo "DOCKER_IMAGE_VERSION1=$VERSION1" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_VERSION2=$VERSION2" >> $GITHUB_ENV

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        if: steps.extract_versions.outcome == 'success'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Image 1 with extracted version
      - name: Build and push Image 1
        if: steps.extract_versions.outcome == 'success'
        run: |
          docker build -t $DOCKER_IMAGE_NAME1:${{ env.DOCKER_IMAGE_VERSION1 }} -t $DOCKER_IMAGE_NAME1:latest -f QUICK/Dockerfile .
          docker push $DOCKER_IMAGE_NAME1:${{ env.DOCKER_IMAGE_VERSION1 }}
          docker push $DOCKER_IMAGE_NAME1:latest

      # Build and push Image 2 with extracted version
      - name: Build and push Image 2
        if: steps.extract_versions.outcome == 'success'
        run: |
          docker build -t $DOCKER_IMAGE_NAME2:${{ env.DOCKER_IMAGE_VERSION2 }} -t $DOCKER_IMAGE_NAME2:latest -f QUICK/Dockerfile.managed .
          docker push $DOCKER_IMAGE_NAME2:${{ env.DOCKER_IMAGE_VERSION2 }}
          docker push $DOCKER_IMAGE_NAME2:latest
